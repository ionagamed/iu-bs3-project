"""
generate_p_equal_to_n_params.sage

Generates an elliptic curve that has an order equal to the prime field order.

Uses an approach outlined in http://www.monnerat.info/publications/anomalous.pdf.
"""


# This file was *autogenerated* from the file ../scripts/generate_p_equal_to_n_params.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_11 = Integer(11); _sage_const_257743850762632419871495 = Integer(257743850762632419871495); _sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_15 = Integer(15); _sage_const_1728 = Integer(1728)
# flake8: noqa

from argparse import ArgumentParser
import sys


def parse_args():
    parser = ArgumentParser()
    return parser.parse_args(sys.argv[_sage_const_1 :])


def main():
    args = parse_args()

    # this is only one example of such curve

    # generating (well, actually just settings) parameters
    D = _sage_const_11 
    m = _sage_const_257743850762632419871495 
    p = _sage_const_11  * m * (m + _sage_const_1 ) + _sage_const_3 
    j = GF(p)(-_sage_const_2 **_sage_const_15 )

    a = -_sage_const_3  * j / (j - _sage_const_1728 )
    b = _sage_const_2  * j / (j - _sage_const_1728 )

    # validating that everything is ok
    E = EllipticCurve(GF(p), [a, b])
    P = E.random_element()

    # additionally create a random generator
    G = E.random_element()
    Gx, Gy = G.xy()

    if P.order() != p:
        print('Something is wrong')
    else:
        print(p)
        print(a)
        print(b)
        print(Gx)
        print(Gy)
        print(p)  # order is p, we know it


if __name__ == "__main__":
    main()

